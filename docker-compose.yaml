version: '3.8'

services:
  # Nginx Proxy
  proxy:
    build:
      context: ./src/proxy
      dockerfile: Dockerfile
    container_name: simple-chat-proxy
    environment:
      - NGINX_PORT=${NGINX_PORT}
      - NGINX_SSL_PORT=${NGINX_SSL_PORT}
      - BACKEND_PORT=${BACKEND_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - SOCKET_PORT=${SOCKET_PORT}
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    depends_on:
      - backend
      - frontend
      - socket
    networks:
      - simple-chat-network
    restart: unless-stopped

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: simple-chat-mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    expose:
      - "3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - simple-chat-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  # Go Backend
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: simple-chat-backend
    environment:
      # Database configuration
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_SSL_MODE: false
      
      # Server configuration
      SERVER_PORT: ${BACKEND_PORT}
      SERVER_HOST: 0.0.0.0
      
      # JWT configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRY: ${JWT_EXPIRY}
      
      # CORS configuration
      CORS_ORIGIN: ${CORS_ORIGIN}
      
      # Environment
      ENV: ${ENV}
    expose:
      - "${BACKEND_PORT}"
    depends_on:
      - mysql
    networks:
      - simple-chat-network
    restart: unless-stopped
    volumes:
      - ./src/backend:/app
      - /app/vendor

  # Socket Service (WebSocket)
  socket:
    build:
      context: ./src/socket
      dockerfile: Dockerfile
    container_name: simple-chat-socket
    environment:
      # Socket configuration
      SOCKET_PORT: ${SOCKET_PORT}
      SOCKET_HOST: 0.0.0.0
      
      # Redis for socket clustering (optional)
      REDIS_URL: ${REDIS_URL}
      
      # Environment
      ENV: ${ENV}
    expose:
      - "${SOCKET_PORT}"
    depends_on:
      - mysql
    networks:
      - simple-chat-network
    restart: unless-stopped
    volumes:
      - ./src/socket:/app
      - /app/vendor

  # Redis (for socket clustering)
  redis:
    image: redis:7-alpine
    container_name: simple-chat-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - simple-chat-network
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: simple-chat-frontend
    environment:
      # API configuration
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL}
      REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL}
      
      # App configuration
      REACT_APP_NAME: ${REACT_APP_NAME}
      REACT_APP_VERSION: ${REACT_APP_VERSION}
      
      # Environment
      NODE_ENV: ${NODE_ENV}
    expose:
      - "${FRONTEND_PORT}"
    depends_on:
      - backend
      - socket
    networks:
      - simple-chat-network
    restart: unless-stopped
    volumes:
      - ./src/frontend:/app
      - /app/node_modules

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  simple-chat-network:
    driver: bridge
