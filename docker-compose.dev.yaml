version: '3.8'

services:
  # Nginx Proxy (Development)
  proxy:
    build:
      context: ./src/proxy
      dockerfile: Dockerfile.dev
    container_name: simple-chat-proxy-dev
    environment:
      - NGINX_PORT=${NGINX_PORT}
      - BACKEND_PORT=${BACKEND_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - SOCKET_PORT=${SOCKET_PORT}
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./src/proxy/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./src/proxy/conf.d:/etc/nginx/conf.d
    depends_on:
      - backend
      - frontend
      - socket
    networks:
      - simple-chat-network-dev
    restart: unless-stopped

  # PostgreSQL Database
  mysql:
    image: mysql:8.0
    container_name: simple-chat-mysql-dev
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql_data_dev:/var/lib/mysql
      - ./.docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - simple-chat-network-dev
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  # Redis (for socket clustering)
  redis:
    image: redis:7-alpine
    container_name: simple-chat-redis-dev
    command: redis-server --appendonly yes
    volumes:
      - redis_data_dev:/data
    networks:
      - simple-chat-network-dev
    restart: unless-stopped

  # React Frontend (Development with hot reload)
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile.dev
    container_name: simple-chat-frontend-dev
    environment:
      # API configuration
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL}
      REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL}
      
      # App configuration
      REACT_APP_NAME: ${REACT_APP_NAME}
      REACT_APP_VERSION: ${REACT_APP_VERSION}
      
      # Environment
      NODE_ENV: ${NODE_ENV}
    expose:
      - "${FRONTEND_PORT}"
    depends_on:
      - backend
      - socket
    networks:
      - simple-chat-network-dev
    restart: unless-stopped
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
    command: ["npm", "start"]

  backend:
    build:
      context: ./
      dockerfile: ./.docker/service/Dockerfile
    container_name: simple-chat-backend-dev
    ports:
      - "8080:80"
    volumes:
      - ./src/backend:/go/src/backend
    working_dir: /go/src/backend
    command: sh -c 'go mod tidy && gow run .'
    env_file:
      - .env
    networks:
      - simple-chat-network-dev

  socket:
    build:
      context: ./src/socket
      dockerfile: Dockerfile.dev
    container_name: simple-chat-socket-dev
    ports:
      - "8081:80"
    volumes:
      - ./src/socket:/app
    working_dir: /app
    command: sh -c 'go mod tidy && gow run .'
    env_file:
      - .env

volumes:
  mysql_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  simple-chat-network-dev:
    driver: bridge
